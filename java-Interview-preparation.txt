Java Preparation Cource with Jdk 1.8


***Core Java***OOPS concepts
1. Differences between JDK, JRE and JVM?
https://www.geeksforgeeks.org/differences-jdk-jre-jvm/

2. Memory Model of JVM 1.8?
https://howtodoinjava.com/java/garbage-collection/java-memory-model/

3. What is JVM Garbage collection?
Ans.   Java garbage collection is the process by which Java programs perform automatic memory management. Java programs compile to bytecode that can be run 
on a Java Virtual Machine, or JVM for short. When Java programs run on the JVM, objects are created on the heap, which is a portion of memory dedicated to the program. 
Eventually, some objects will no longer be needed. The garbage collector finds these unused objects and deletes them to free up memory.

4. Any 3 types of Garbage Collection and How to set it?
Ans.   1.Serial Garbage Collector
       2.Parallel Garbage Collector
	   3. CMS Garbage Collector
	We can set it by running it through command prompt by this commnd java '-XX:+<name of GC> -jar Application.java' like for parllel command 
	would be 'java -XX:+UseParallelGC -jar Application.java'
	refer here for details -> https://www.baeldung.com/jvm-garbage-collectors
	
5.  JDK, JRE and JVM out of these 3 which is OS(platform) dependent and Independent.
6.  What is bytecode in java? which cmd command generates the bytecode?
7.  What is difference in 'javac' and 'java' command?
8.  What are the 4 four pillars of OOPs?  -> https://info.keylimeinteractive.com/the-four-pillars-of-object-oriented-programming
9.  Code Example of Encapsulation ?
     class Example{
		 String name; 
		 int age
		 public String getAge(){
			return age;
		 }
	 }
10. Code Example of Abstraction?
		Example ex = new Example();
		abstraction --> ex.getName()
11. Types of Polymorphism?
12. What is difference in dynamic method dispatch and method overriding how can it be achieved?
13. How many methods with same name we can define in a class?
14. What is method signature ? 
15. Can we override an overloaded method?
16. Can we override variables?
17. Does java support operator overloading?
18. Is access modifier and  return type is part of method signature?
19. Can we change access modifier and  return type in method overloding?
20. Can we change access modifier and  return type in method overriding? If yes then what are the rules?
21. What are the access modifiers in java and how they can be applied on method, variables and classes?
22. Can we have private or protected class in Java?
23. How many Java classes we can define in Single java file?
24. Difference in .java and .class extention?
25. How to generate and run .class files, create an example?
26. Can we override a protected method by changing its modifier to private?
27. Can we override a protected method by changing its modifier to public?
28. What is default access modifier?
29. What is constructor in a java class?
30. What is default constructor ?
31. Difference in method and contructor?
32. What is role constructor in inheritance?
33. What is constructor chaining? WAP for example.
34. Will below Main class  compile successfully?
	class Example{
		private Example(){}
	}
	class ChildExample extends Example{
		
	}
	class Main{
		public static void main(String args[]){
			ChildExample ce = new ChildExample();
		}
	}
	 a. If there any issue, please explain
	 b. If there any issue, how to make it compilable
	 
35.  Will below Main class  compile successfully?
     class Example{
		private Example(){}
	}

	class Main{
		public static void main(String args[]){
			Example e = new Example();
		}
	}
36. How many constructors we can provide in a class? What is the rule?
37. What value will be printed of intAge and integerAge?
    class Main{
		int intAge;
		Integer integerAge;
		
		public static void main(String args[]){
			Main m = new Main();
			System.out.println(m.intAge+"    "+m.integerAge);
		}
	 }
	  
	 a. explain what is diff in both variables and their values?
	 b. Who assigned these values to intAge and integerAge?
	 c. what this call does 'new Main();'?
	 d. will this compile?
	 class Main{
		public static void main(String args[]){
			int intAge;
			Integer integerAge;
			System.out.println(intAge+"    "+integerAge);
		}
	 }
	 If Not, what is the error why it not occured in above program because in both places we have not initilized
	 
38. Will below code compile?
    class Example{
		 public Example(String name){}
	 }
	 
	 class ChildExample extends Example{
		
	 }
	 
	 class Main{
		public static void main(String args[]){
			ChildExample ce = new ChildExample();
		}
	 }
	 
	 a. If Not, Explain the reason
	 b. Make above code compilable, you can only modify ChildExample class only
	 c. Why is below code compiling successfully as compare to above
	 
	 class Example{
		 public Example(){}
	 }
	 
	 class ChildExample extends Example{
		
	 }
	 
	 class Main{
		public static void main(String args[]){
			ChildExample ce = new ChildExample();
		}
	 }
39. What is super and this keywords in java?
40. Can we call the super class onstructor with super keyword, if yes WAP for example.
41. Is multiple Inheritance is possible in java? Understand the reason?
42. How Many access modifiers we have in java?
43. What will be printed?
	class Example{
		 public Example(){
			System.out.println("Example is invoked");
		}
	 }
	 
	 class ChildExample extends Example{
		public ChildExample(){
			System.out.println("ChildExample is invoked");
		}
		
	 }
	 
	 class SubChildExample extends Example{
		public SubChildExample(){
			System.out.println("SubChildExample is invoked");
		}
	 }
	 
	 class Main{
		public static void main(String args[]){
			SubChildExample ce = new SubChildExample();
		}
	 }
44. Will code compile?
    class Example{
		 public Example(String name){
			System.out.println("Example is invoked");
		}
	 }
	 
	 class ChildExample extends Example{
		public ChildExample(){
			super("java");
			System.out.println("ChildExample is invoked");
		}
		
	 }
	 
	 class Main{
		public static void main(String args[]){
			ChildExample ce = new ChildExample();
		}
	 }
45. What is static keyword? can it be applied on classes?
46. Difference in static and instance method and variables?
47. Can we override a Static method?
48. What will be result?
	class Example{	 
		 static void m1(){
			 System.out.println("static method Example.m1() called");
		 }
	}
	class ChildExample extends Example{	
	}

	class Main{
		public static void main(String args[]){
			ChildExample ce = new ChildExample();
			ce.m1();
		}
	}
	
49. What will be result?
	class Example{	 
		 static void m1(){
			 System.out.println("static method Example.m1() called");
		 }
	}
	class ChildExample extends Example{	
		static void m1(){
			 System.out.println("static method ChildExample.m1() called");
		 }
	}

	class Main{
		public static void main(String args[]){
			ChildExample ce = new ChildExample();
			ce.m1();
		}
	}
	a. why its output is different than question no. 48
	
50. Is java pass by value and pass by reference, What is Java, value or refernce?
51. Difference in aggregation, composition and cohesion? Try to Create a proble for each and understand?
52. What is difference in between static block, init block and constructor block?
